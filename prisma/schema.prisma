// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String         @unique
  emailVerified     DateTime?
  hashedPassword    String?
  password          String?        // For backward compatibility
  image             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isVerified        Boolean        @default(false)
  hasAcceptedTerms  Boolean        @default(false)
  termsAccepted     Boolean        @default(false) // For backward compatibility
  verificationToken String?
  accounts          Account[]
  sessions          Session[]
  conversations     Conversation[]
  notes             Note[]
  subscription      Subscription?
  payments          Payment[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id         String   @id @default(cuid())
  title      String
  transcript String   @db.Text
  messages   Json?    // Stored as JSON for chat history
  audioUrl   String?  // Optional audio reference
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes      Note[]
}

model Note {
  id             String       @id @default(cuid())
  content        String       @db.Text
  actionItems    String?      @db.Text
  isShared       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  plan             String   @default("free")
  startDate        DateTime @default(now())
  endDate          DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  monthlyTimeLimit Int?     // Time limit in seconds (-1 for unlimited)
  usedTime         Int?     @default(0) // Used time in seconds
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  orderId       String
  amount        Decimal  @db.Decimal(10, 2)
  currency      String
  status        String
  paymentMethod String?
  planTier      String
  billingCycle  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
